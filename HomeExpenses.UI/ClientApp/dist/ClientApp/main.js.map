{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.scss","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/app.routing.ts","webpack:///./src/app/modules/main/main.component.html","webpack:///./src/app/modules/main/main.component.scss","webpack:///./src/app/modules/main/main.component.ts","webpack:///./src/app/modules/main/main.module.ts","webpack:///./src/app/modules/main/shared/side-menu.service.ts","webpack:///./src/app/modules/main/side-menu/side-menu.component.html","webpack:///./src/app/modules/main/side-menu/side-menu.component.scss","webpack:///./src/app/modules/main/side-menu/side-menu.component.ts","webpack:///./src/app/modules/main/toolbar/toolbar.component.html","webpack:///./src/app/modules/main/toolbar/toolbar.component.scss","webpack:///./src/app/modules/main/toolbar/toolbar.component.ts","webpack:///./src/app/modules/recipients/recipients.component.html","webpack:///./src/app/modules/recipients/recipients.component.scss","webpack:///./src/app/modules/recipients/recipients.component.ts","webpack:///./src/app/modules/recipients/recipients.module.ts","webpack:///./src/app/modules/recipients/shared/recipients.service.ts","webpack:///./src/app/shared/modules/material/material.module.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"<div class=\\\"body__fullscreen\\\">\\r\\n  <router-outlet></router-outlet>\\r\\n</div>\\r\\n\"","module.exports = \".body__fullscreen {\\n  height: 100vh;\\n  width: 100vw; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvQzpcXFVzZXJzXFx0ZHJ6eVxcc291cmNlXFxyZXBvc1xcSG9tZUV4cGVuc2VzXFxIb21lRXhwZW5zZXMuVUlcXENsaWVudEFwcC9zcmNcXGFwcFxcYXBwLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsY0FBYTtFQUNiLGFBQVksRUFDYiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi5ib2R5X19mdWxsc2NyZWVuIHtcclxuICBoZWlnaHQ6IDEwMHZoO1xyXG4gIHdpZHRoOiAxMDB2dztcclxufVxyXG4iXX0= */\"","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent {\r\n}\r\n","import {BrowserModule} from '@angular/platform-browser';\r\nimport {NgModule} from '@angular/core';\r\nimport {HttpClientModule} from '@angular/common/http';\r\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\r\nimport {RouterModule} from \"@angular/router\";\r\n\r\nimport {AppComponent} from './app.component';\r\nimport {MainModule} from \"./modules/main/main.module\";\r\nimport {AppRoutesModule} from \"./app.routing\";\r\nimport {MaterialModule} from \"./shared/modules/material/material.module\";\r\nimport {RecipientsModule} from \"./modules/recipients/recipients.module\";\r\n\r\n@NgModule({\r\n  imports: [\r\n    BrowserModule,\r\n    BrowserAnimationsModule,\r\n    HttpClientModule,\r\n    MainModule,\r\n    RecipientsModule,\r\n    MaterialModule,\r\n    RouterModule,\r\n    AppRoutesModule\r\n  ],\r\n  exports: [\r\n    BrowserModule\r\n  ],\r\n  declarations: [\r\n    AppComponent\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule {\r\n}\r\n","import {MainComponent} from \"./modules/main/main.component\";\r\nimport {RouterModule, Routes} from \"@angular/router\";\r\nimport {RecipientsComponent} from \"./modules/recipients/recipients.component\";\r\n\r\nconst appRoutes: Routes = [\r\n  {\r\n    path: '',\r\n    component: MainComponent,\r\n    children: [\r\n      {\r\n        path: 'recipients',\r\n        component: RecipientsComponent\r\n      }]\r\n  }];\r\n\r\nexport const AppRoutesModule = RouterModule.forRoot(appRoutes);\r\n","module.exports = \"<div class=\\\"app\\\">\\n  <app-toolbar></app-toolbar>\\n\\n  <mat-sidenav-container>\\n    <mat-sidenav class=\\\"app_menu\\\" mode=\\\"side\\\" #sidenav [opened]=\\\"true\\\">\\n      <app-side-menu></app-side-menu>\\n    </mat-sidenav>\\n    <mat-sidenav-content class=\\\"app__main\\\">\\n      sdfsdfdsf\\n      <router-outlet></router-outlet>\\n    </mat-sidenav-content>\\n  </mat-sidenav-container>\\n</div>\\n\"","module.exports = \"/* SIZES DEFINITIONS\\r\\n-----------------------------------------------------*/\\n/* SIDE MENU\\r\\n------------------------*/\\n/* FONTS\\r\\n------------------------*/\\n/* PADDING\\r\\n------------------------*/\\n/* Z_INDEX\\r\\n-----------------------------*/\\n/* PIXELATE FUNCTION\\r\\n-------------------------------------------------------------------------------*/\\n/*@function strip-unit($num) {\\r\\n  @return $num / ($num * 0 + 1);\\r\\n}*/\\n/* STRIP-UNIT FUNCTION\\r\\n-------------------------------------------------------------------------------*/\\n/* BOX-SHADOW MIXIN\\r\\n-------------------------------------------------------------------------------*/\\n/* CLASS CREATION MIXIN\\r\\n-------------------------------------------------------------------------------*/\\n/* FONT MIXIN\\r\\n-------------------------------------------------------------------------------*/\\n/* CHOOSE FONT\\r\\n    Function takes fonts, that are in variable and than\\r\\n    it gives name of proper font\\r\\n-------------------------------------------------------------------------------*/\\n/* MARGIN MIXIN\\r\\n-------------------------------------------------------------------------------*/\\n/* PADDING MIXIN\\r\\n-------------------------------------------------------------------------------*/\\n/* POSITION MIXIN\\r\\n-------------------------------------------------------------------------------*/\\n/* PSEUDO ELEMENT MIXIN\\r\\n-------------------------------------------------------------------------------*/\\n/* BORDER RADIUS MIXIN\\r\\n-------------------------------------------------------------------------------*/\\n/* ELEMENT SIZE MIXIN\\r\\n-------------------------------------------------------------------------------*/\\n/* TRANSITION MIXIN\\r\\n-------------------------------------------------------------------------------*/\\n/* WORD WRAP MIXIN\\r\\n-------------------------------------------------------------------------------*/\\n/* Z-INDEX MIXIN\\r\\n-------------------------------------------------------------------------------*/\\n/* OVERLAY MIXIN\\r\\n-------------------------------------------------------------------------------*/\\n/* TRUNCATE MIXIN\\r\\n-------------------------------------------------------------------------------*/\\n/* INPUT PLACEHOLDER MIXIN\\r\\n-------------------------------------------------------------------------------*/\\n/* RESPONSIVE RATIO MIXIN\\r\\n-------------------------------------------------------------------------------*/\\n/* HARDWARE ACCELERATE MIXIN\\r\\n-------------------------------------------------------------------------------*/\\n/* UNORDERED LIST WITH NO BULLETS\\r\\n-------------------------------------------------------------------------------*/\\n/* CENTRALIZE CONTENT INSIDE DIV\\r\\n-------------------------------------------------------------------------------*/\\n.app {\\n  display: flex;\\n  min-height: 100vh; }\\n.app__main {\\n    -moz-flex: 1;\\n    flex: 1;\\n    flex: auto;\\n    width: calc(100vw - 19.375rem);\\n    padding: 1.25rem 1.5625rem 1.875rem;\\n    margin: 0 0 0 16.25rem; }\\n.app__menu {\\n    position: fixed;\\n    width: 16.25rem;\\n    height: 100vh; }\\n\\r\\n/*# sourceMappingURL=data:application/json;base64, */\"","import {Component, OnInit, ViewChild} from '@angular/core';\nimport {SideMenuService} from \"./shared/side-menu.service\";\nimport {MatSidenav} from \"@angular/material\";\n\n@Component({\n  selector: 'app-main',\n  templateUrl: './main.component.html',\n  styleUrls: ['./main.component.scss']\n})\nexport class MainComponent implements OnInit {\n  @ViewChild('sidenav') public sidenav: MatSidenav;\n\n  constructor(private sideMenuService: SideMenuService) { }\n\n  ngOnInit() {\n    this.sideMenuService.setSidenav(this.sidenav);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MainComponent } from './main.component';\nimport { ToolbarComponent } from './toolbar/toolbar.component';\nimport {SideMenuComponent} from \"./side-menu/side-menu.component\";\nimport {MaterialModule} from \"../../shared/modules/material/material.module\";\nimport {RouterModule} from \"@angular/router\";\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MaterialModule\n  ],\n  exports : [MainComponent],\n  declarations: [\n    MainComponent,\n    ToolbarComponent,\n    SideMenuComponent\n  ]\n})\nexport class MainModule { }\n","import { Injectable } from '@angular/core';\nimport {MatSidenav} from \"@angular/material\";\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class SideMenuService {\n  private sidenav: MatSidenav;\n\n  constructor() { }\n\n  public setSidenav(sidenav: MatSidenav) {\n    this.sidenav = sidenav;\n  }\n\n  public toggle(): void {\n    this.sidenav.toggle();\n  }\n}\n","module.exports = \"<mat-nav-list>\\n  <a mat-list-item routerLink=\\\"/recipients\\\">Recipients</a>\\n</mat-nav-list>\\n\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvbWFpbi9zaWRlLW1lbnUvc2lkZS1tZW51LmNvbXBvbmVudC5zY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-side-menu',\n  templateUrl: './side-menu.component.html',\n  styleUrls: ['./side-menu.component.scss']\n})\nexport class SideMenuComponent implements OnInit {\n  constructor() { }\n\n  ngOnInit() {\n  }\n}\n","module.exports = \"<mat-toolbar>\\n  <button mat-icon-button (click)=\\\"toggleSideMenu()\\\"><mat-icon>menu</mat-icon></button>\\n  <h1>Home Expenses</h1>\\n</mat-toolbar>\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvbWFpbi90b29sYmFyL3Rvb2xiYXIuY29tcG9uZW50LnNjc3MifQ== */\"","import {Component, OnInit} from '@angular/core';\nimport {SideMenuService} from \"../shared/side-menu.service\";\n\n@Component({\n  selector: 'app-toolbar',\n  templateUrl: './toolbar.component.html',\n  styleUrls: ['./toolbar.component.scss']\n})\nexport class ToolbarComponent implements OnInit {\n\n  constructor(private sideMenuService: SideMenuService) { }\n\n  ngOnInit() {\n  }\n\n  toggleSideMenu(){\n    this.sideMenuService.toggle();\n  }\n}\n","module.exports = \"<p>\\r\\n  recipients works!\\r\\n</p>\\r\\n<!--<mat-list>-->\\r\\n  <!--<mat-list-item> List works! </mat-list-item>-->\\r\\n  <!--<mat-list-item> {{recipient.id}} </mat-list-item>-->\\r\\n  <!--<mat-list-item> {{recipient.name}} </mat-list-item>-->\\r\\n  <!--<mat-list-item> {{recipient.city}} </mat-list-item>-->\\r\\n  <!--<mat-list-item> {{recipient.street}} </mat-list-item>-->\\r\\n  <!--<mat-list-item> {{recipient.number}} </mat-list-item>-->\\r\\n<!--</mat-list>-->\\r\\n\"","module.exports = \"table {\\n  width: 100%; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbW9kdWxlcy9yZWNpcGllbnRzL0M6XFxVc2Vyc1xcdGRyenlcXHNvdXJjZVxccmVwb3NcXEhvbWVFeHBlbnNlc1xcSG9tZUV4cGVuc2VzLlVJXFxDbGllbnRBcHAvc3JjXFxhcHBcXG1vZHVsZXNcXHJlY2lwaWVudHNcXHJlY2lwaWVudHMuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxZQUFXLEVBQ1oiLCJmaWxlIjoic3JjL2FwcC9tb2R1bGVzL3JlY2lwaWVudHMvcmVjaXBpZW50cy5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbInRhYmxlIHtcclxuICB3aWR0aDogMTAwJTtcclxufVxyXG4iXX0= */\"","import { Component, OnInit } from '@angular/core';\r\nimport {HttpErrorResponse} from \"@angular/common/http\";\r\nimport {throwError} from \"rxjs\";\r\nimport {catchError} from \"rxjs/operators\";\r\n\r\n\r\nimport { Recipient} from \"./shared/dto/Recipient\";\r\nimport {RecipientsService} from \"./shared/recipients.service\";\r\n\r\n@Component({\r\n  selector: 'app-recipients',\r\n  templateUrl: './recipients.component.html',\r\n  styleUrls: ['./recipients.component.scss']\r\n})\r\nexport class RecipientsComponent implements OnInit {\r\n  recipient: Recipient ;\r\n\r\n  constructor(private recipientsService: RecipientsService) { }\r\n\r\n  ngOnInit() {\r\n    this.recipientsService.getRecipients()\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      )\r\n      .subscribe(recipient => this.recipient = recipient);\r\n  }\r\n\r\n  private handleError(error: HttpErrorResponse) {\r\n    if (error.error instanceof ErrorEvent) {\r\n      // A client-side or network error occurred. Handle it accordingly.\r\n      console.error('An error occurred:', error.error.message);\r\n    } else {\r\n      // The backend returned an unsuccessful response code.\r\n      // The response body may contain clues as to what went wrong,\r\n      console.error(\r\n        `Backend returned code ${error.status}, ` +\r\n        `body was: ${error.error}`);\r\n    }\r\n    // return an observable with a user-facing error message\r\n    return throwError(\r\n      'Something bad happened; please try again later.' + error.error.status);\r\n  };\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {MatListModule} from '@angular/material/list';\r\n\r\nimport {RecipientsComponent} from './recipients.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatListModule\r\n  ],\r\n  declarations: [\r\n    RecipientsComponent\r\n  ],\r\n  exports: [\r\n    RecipientsComponent\r\n  ]\r\n})\r\nexport class RecipientsModule {\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {HttpClient} from \"@angular/common/http\";\r\n\r\nimport {Recipient} from \"./dto/Recipient\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\nexport class RecipientsService {\r\n\r\n  private path = 'http://localhost:60440/api/Recipients/F16CE11C-CA45-4449-A942-54F4B22106EA';\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getRecipients () {\r\n    return this.http.get<Recipient>(this.path);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {\n  MatButtonModule,\n  MatButtonToggleModule,\n  MatIconModule,\n  MatListModule,\n  MatMenuModule,\n  MatSidenavModule,\n  MatToolbarModule\n} from \"@angular/material\";\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatSidenavModule,\n    MatToolbarModule,\n    MatIconModule,\n    MatMenuModule,\n    MatListModule,\n    MatButtonModule,\n    MatButtonToggleModule\n  ],\n  exports: [\n    CommonModule,\n    MatSidenavModule,\n    MatToolbarModule,\n    MatIconModule,\n    MatMenuModule,\n    MatListModule,\n    MatButtonModule,\n    MatButtonToggleModule\n  ],\n  declarations: []\n})\nexport class MaterialModule { }\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * In development mode, for easier debugging, you can ignore zone related error\r\n * stack frames such as `zone.run`/`zoneDelegate.invokeTask` by importing the\r\n * below file. Don't forget to comment it out in production mode\r\n * because it will have a performance impact when errors are thrown\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.log(err));\r\n"],"sourceRoot":""}